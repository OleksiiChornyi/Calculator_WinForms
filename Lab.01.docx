using System;
using WindowsFormsApp2;
using Microsoft.VisualStudio.TestTools.UnitTesting;
namespace MyUnitTests
{
    [TestClass]
    public class MyTests
    {
        Calculator c = new Calculator();

        [TestMethod]
        public void AddPositive()
        {
            double a = 10051, b = 49;
            double expected = 1100;
            double actual = c.add(a, b);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void AddNegative()
        {
            double a = -809, b = 9;
            double expected = -800;
            double actual = c.add(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void SubPositive()
        {
            double a = 127, b = 54;
            double expected = 73;
            double actual = c.sub(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void SubNegative()
        {
            double a = -9, b = -3;
            double expected = -6;
            double actual = c.sub(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void MulPositive()
        {
            double a = 300, b = 5;
            double expected = 1500;
            double actual = c.mul(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void MulNegative()
        {
            double a = -663, b = -9;
            double expected = 5967;
            double actual = c.mul(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void MultZero()
        {
            double a = 100, b = 0;
            double expected = 0;
            double actual = c.mul(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void DivPositive()
        {
            double a = 140, b = 70;
            double expected = 2;
            double actual = c.div(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void DivNegative()
        {
            double a = -467, b = -45;
            double expected = 10;
            double actual = c.div(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void DivZero()
        {
            double a = 1000, b = 0;
            double expected = 0;
            double actual = c.div(a, b);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Cos1()
        {
            double a = 45;
            double expected = 1;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Cos2()
        {
            double a = -90;
            double expected = -1;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Sin_3()
        {
            double a = 0;
            double expected = 0;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Cos_1()
        {
            double a = 180;
            double expected = -1f;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Cos_2()
        {
            double a = 60;
            double expected = 0.5f;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void Cos_3()
        {
            double a = 0;
            double expected = 1;
            double actual = c.cos(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void SqrtInteger()
        {
            double a = 1024;
            double expected = 32;
            double actual = c.sqr(a);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void SqrtNegative()
        {
            double a = -955;
            double expected = 0;
            double actual = c.sqr(a);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void SqrtNonInteger()
        {
            double a = 884;
            double expected = 29.732137494637f;
            double actual = c.sqr(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void SquarePozitive()
        {
            double a = 36;
            double expected = 1296;
            double actual = c.factorial(a);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void SquareNegative()
        {
            double a = -19;
            double expected = 361;
            double actual = c.factorial(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void PowerOne()
        {
            double a = 51, b = 0;
            double expected = 1;
            double actual = c.factorial(a);
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void PowerPozitive()
        {
            double a = 3, b = 8;
            double expected = 6561;
            double actual = c.factorial(a);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void PowerNegative()
        {
            double a = 4, b = -2;
            double expected = 0.0625f;
            double actual = c.factorial(a);
            Assert.AreEqual(expected, actual);
        }

    }
}
